// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PresentLocation {
  Dhaka
  Chattogram
  Barishal
  Khulna
  Mymensingh
  Rangpur
  Rajshahi
}

enum ProfileType {
  Traveller
  Business
}

enum TravelMode {
  Bus
  Train
  Plane
  Car
}

enum BusinessType {
  HorseRiding
  BoatService
  RestaurantService
  HotelService
  Parasailing
}

enum TripLocation {
  Sunamganj
  Coxsbazar
  Bandarban
  Sylhet
}

model User {
  id          String            @id @default(uuid()) @db.Uuid
  name        String
  email       String            @unique
  password    String
  profileType ProfileType
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  traveller   TravellerProfile?
  business    BusinessProfile?
}

model TravellerProfile {
  id        String     @id @default(uuid()) @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tripPlan  TripPlan[]
}

model TripPlan {
  id                 String               @id @default(uuid()) @db.Uuid
  traveller          TravellerProfile     @relation(fields: [travellerId], references: [id])
  travellerId        String               @db.Uuid
  tripLocation       TripLocation
  hotelBooking       HotelBooking?
  travelInformation  TravelInformation?
  restaurantBooking  RestaurantBooking?
  boatServiceBooking BoatServiceBooking[]
  horseRidingBooking HorseRidingBooking[]
  parasailingBooking ParasailingBooking[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model TravelInformation {
  id                 String          @id @default(uuid()) @db.Uuid
  tripPlan           TripPlan        @relation(fields: [tripPlanId], references: [id])
  tripPlanId         String          @unique @db.Uuid
  startDate          String
  returnDate         String
  presentLocation    PresentLocation
  travelMode         TravelMode
  numberOfTravellers Int
  totalCost          Int
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model BusinessProfile {
  id                String              @id @default(uuid()) @db.Uuid
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String              @unique @db.Uuid
  businessType      BusinessType?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  onBoarded         Boolean             @default(false)
  horseRiding       HorseRiding[]
  boatService       BoatService[]
  restaurantService RestaurantService[]
  hotelService      HotelService[]
  parasailing       Parasailing[]
}

model RestaurantService {
  id                String               @id @default(uuid()) @db.Uuid
  business          BusinessProfile      @relation(fields: [businessId], references: [id])
  businessId        String               @db.Uuid
  restaurantBooking RestaurantBooking[]
  name              String
  location          TripLocation
  address           String
  description       String
  slogan            String?
  contactNumber     String
  imageUrls         String[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  menuItems         RestaurantMenuItem[]
}

model RestaurantMenuItem {
  id           String            @id @default(uuid()) @db.Uuid
  restaurant   RestaurantService @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String            @db.Uuid
  name         String
  price        Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model RestaurantBooking {
  id              String            @id @default(uuid()) @db.Uuid
  restaurant      RestaurantService @relation(fields: [restaurantId], references: [id])
  restaurantId    String            @db.Uuid
  tripPlan        TripPlan          @relation(fields: [tripPlanId], references: [id])
  tripPlanId      String            @unique @db.Uuid
  firstName       String
  lastName        String
  phoneNumber     String
  dateTime        String
  totalSeat       Int
  estimatedBudget Int
  confirmed       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model HotelService {
  id            String          @id @default(uuid()) @db.Uuid
  business      BusinessProfile @relation(fields: [businessId], references: [id])
  businessId    String          @db.Uuid
  hotelBooking  HotelBooking[]
  name          String
  slogan        String?
  location      TripLocation
  address       String
  perks         String[]
  overview      String
  checkInTime   String
  checkOutTime  String
  contactNumber String
  hotelRooms    HotelRoom[]
  imageUrls     String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model HotelRoom {
  id        String       @id @default(uuid()) @db.Uuid
  hotel     HotelService @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   String       @db.Uuid
  type      String
  price     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model HotelBooking {
  id             String       @id @default(uuid()) @db.Uuid
  tripPlan       TripPlan     @relation(fields: [tripPlanId], references: [id])
  tripPlanId     String       @unique @db.Uuid
  hotelService   HotelService @relation(fields: [hotelServiceId], references: [id])
  hotelServiceId String       @db.Uuid
  hotelRoomType  String
  firstName      String
  lastName       String
  phoneNumber    String
  checkinDate    String
  checkoutDate   String
  totalRoom      Int
  cost           Int
  confirmed      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model HorseRiding {
  id                 String               @id @default(uuid()) @db.Uuid
  business           BusinessProfile      @relation(fields: [businessId], references: [id])
  businessId         String               @db.Uuid
  horseRidingBooking HorseRidingBooking[]
  name               String
  location           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model HorseRidingBooking {
  id            String      @id @default(uuid()) @db.Uuid
  horseRiding   HorseRiding @relation(fields: [horseRidingId], references: [id])
  horseRidingId String      @db.Uuid
  tripPlan      TripPlan    @relation(fields: [tripPlanId], references: [id])
  tripPlanId    String      @unique @db.Uuid
  firstName     String
  lastName      String
  phoneNumber   String
  date          String
  time          String
  totalPerson   Int
  cost          Int
  confirmed     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model BoatService {
  id                 String               @id @default(uuid()) @db.Uuid
  business           BusinessProfile      @relation(fields: [businessId], references: [id])
  businessId         String               @db.Uuid
  boatServiceBooking BoatServiceBooking[]
  name               String
  overview           String
  location           TripLocation
  address            String
  mapLink            String
  perks              String[]
  price              Int
  imageUrls          String[]
  checkInPolicy      String
  bookingPolicy      String
  contactNumber      String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model BoatServiceBooking {
  id            String      @id @default(uuid()) @db.Uuid
  boatService   BoatService @relation(fields: [boatServiceId], references: [id])
  boatServiceId String      @db.Uuid
  tripPlan      TripPlan    @relation(fields: [tripPlanId], references: [id])
  tripPlanId    String      @db.Uuid
  firstName     String
  lastName      String
  phoneNumber   String
  dateTime      String
  totalBoats    Int
  totalCost     Int
  tripDay       Int
  confirmed     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Parasailing {
  id                  String                @id @default(uuid()) @db.Uuid
  business            BusinessProfile       @relation(fields: [businessId], references: [id])
  businessId          String                @db.Uuid
  parasailingPackages ParasailingPackages[]
  parasailingBooking  ParasailingBooking[]
  name                String
  subtitle            String
  overview            String
  location            TripLocation
  address             String
  mapLink             String
  imageUrls           String[]
  contactNumber       String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model ParasailingPackages {
  id            String      @id @default(uuid()) @db.Uuid
  parasailing   Parasailing @relation(fields: [parasailingId], references: [id], onDelete: Cascade)
  parasailingId String      @db.Uuid
  description   String
  price         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ParasailingBooking {
  id            String      @id @default(uuid()) @db.Uuid
  parasailing   Parasailing @relation(fields: [parasailingId], references: [id])
  parasailingId String      @db.Uuid
  tripPlan      TripPlan    @relation(fields: [tripPlanId], references: [id])
  tripPlanId    String      @unique @db.Uuid
  firstName     String
  lastName      String
  phoneNumber   String
  date          String
  time          String
  totalPerson   Int
  cost          Int
  confirmed     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
